package kr.or.ddit.users.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.SessionAttribute;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.common.enumpkg.ServiceResult;
import kr.or.ddit.common.service.AuthenticateService;
import kr.or.ddit.paging.BootstrapPaginationRenderer;
import kr.or.ddit.paging.vo.PaginationInfo;
import kr.or.ddit.paging.vo.SearchVO;
import kr.or.ddit.users.service.QnAService;
import kr.or.ddit.users.vo.QnAVO;
import kr.or.ddit.utils.ValidationUtils;
import kr.or.ddit.validate.grouphint.DeleteGroup;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/member/qna")
public class QnAController {
	
	@Inject
	private QnAService service;
	
	@GetMapping("qnaList")
	public String qnaList(
		Model model
		, @ModelAttribute("simpleCondition") SearchVO simpleCondition
		, @RequestParam(value="page", required = false, defaultValue = "1") int currentPage
		, @SessionAttribute("authId") String memId
		) {
		log.info("아이디 : " + memId);
		PaginationInfo<QnAVO> paging = new PaginationInfo<>();
		paging.setSimpleCondition(simpleCondition); // 키워드 검색 조건
		paging.setCurrentPage(currentPage);
		Map<String, Object> variousCondition = new HashMap<>();
		variousCondition.put("memId", memId);
		
		paging.setVariousCondition(variousCondition);
		
		service.retrieveQnAList(paging);;
		
		paging.setRenderer(new BootstrapPaginationRenderer());
		model.addAttribute("paging", paging);
				
		return "users/notice/usersQuestionList";
	}
	
	@GetMapping("{qstnNo}")
	private String qnaView(@PathVariable String qstnNo, Model model) {
		log.info("글번호 : " + qstnNo);
		QnAVO qna = service.retrieveQnA(qstnNo);
		model.addAttribute("qna", qna);
		return "users/notice/usersQuestionDetail";
	}
	
	@PostMapping("remove")
	public String removeQnA(
			@ModelAttribute QnAVO qnaVO
			, RedirectAttributes redirectAttributes
			) {
			log.info("값 : " + qnaVO);
			String viewName = null;
	
	        ServiceResult result = service.removeQnA(qnaVO);
	        switch (result) {
	            case OK:
	            	redirectAttributes.addFlashAttribute("message", "삭제완료"); 
	                viewName = "redirect:/member/qnaList";
	                break;
	            default:
	                viewName = "redirect:/member/{qstnNo}";
	                redirectAttributes.addFlashAttribute("message", "서버 오류"); 
	                break;
	        }
		    return viewName;
	}
	

}
