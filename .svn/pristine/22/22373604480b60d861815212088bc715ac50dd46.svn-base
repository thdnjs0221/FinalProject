package kr.or.ddit.users.service;

import java.io.File;
import java.io.IOException;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import kr.or.ddit.common.enumpkg.ServiceResult;
import kr.or.ddit.common.service.AuthenticateService;
import kr.or.ddit.common.vo.MemberVO;
import kr.or.ddit.users.dao.UsersInfoDAO;
import kr.or.ddit.users.vo.UsersVO;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class UsersInfoServiceImpl implements UsersInfoService{

	private final UsersInfoDAO dao;
	private final AuthenticateService authService;
	
	@Override
	public MemberVO retrieveUsers(String memId) {
		MemberVO member = dao.selectUsers(memId);
		if(member == null)
			throw new UsernameNotFoundException(memId);
		return member;
	}
	
	@Override
	public ServiceResult modifyUsers(MemberVO users) {
		MemberVO inputData = new MemberVO();
		inputData.setMemId(users.getMemId());
		inputData.setMemPass(users.getMemPass());
		
		ServiceResult authenticated =authService.authenticate(inputData);
		ServiceResult result = null;
		if(authenticated==ServiceResult.OK) {
			int rowcnt = dao.updateUsers(users);
			result = rowcnt > 0 ? ServiceResult.OK : ServiceResult.FAIL;
		}else {
			result = ServiceResult.INVALIDPASSWORD;
		}
		return result;
	}

	@Override
	public ServiceResult removeUsers(MemberVO users) {
		ServiceResult result = authService.authenticate(users);
		if(result == ServiceResult.OK) {
			int rowcnt = dao.deleteUsers(users.getMemId());
			result = rowcnt > 0 ? ServiceResult.OK : ServiceResult.FAIL;
		}else {
			result = ServiceResult.INVALIDPASSWORD;
		}
		return result;
	}
	
}
