package kr.or.ddit.company.controller;

import java.util.List;

import javax.inject.Inject;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.SessionAttribute;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.common.dao.CodeDAO;
import kr.or.ddit.common.dao.RegCodeDAO;
import kr.or.ddit.common.enumpkg.ServiceResult;
import kr.or.ddit.common.vo.CodeVO;
import kr.or.ddit.company.service.RProcedureService;
import kr.or.ddit.company.service.RecruitService;
import kr.or.ddit.company.vo.RProcedureVO;
import kr.or.ddit.company.vo.RecruitVO;
import kr.or.ddit.company.vo.TestVO;
import kr.or.ddit.paging.BootstrapPaginationRenderer;
import kr.or.ddit.paging.vo.PaginationInfo;
import kr.or.ddit.users.vo.ScrapVO;
import kr.or.ddit.validate.grouphint.InsertGroup;
import lombok.extern.slf4j.Slf4j;

/**
 * 
 * C : /board/boardInsert.do GET(POST) /board/new get은 양식 제공, post 등록 
 * R :/board/boardList.do?page=2, /board/boardView.do?what=23 GET: /board?page=2, /board/23 
 * U : /board/boardUpdate.do GET: /board/23/edit, PUT /board/23 get은 양식 제공, PUT 수정 등록 
 * D : /board/boardDelete.do DELETE /board/23
 * 
 * 
 */
@Slf4j
@Controller
@SessionAttributes("targetRecruit")  // 리다이렉션해도 중간에 데이터가 사라지지 않음
public class RecruitController {

	@Inject
	private RecruitService reService;
	
	@Inject
	private RProcedureService rproService;
	
	@Inject
	private CodeDAO codedao;
	
	@Inject
	private RegCodeDAO regdao;
	
	 
	
//	//지역 하위 코드
//	@ModelAttribute("regCodeList")
//	public RegCodeVO regCodeList(
//			@RequestParam(value = "code", required =false )String code
//			){
//		return regdao.selectOneCode(code);
//	}
	
	//전형절차 공통 코드
	@ModelAttribute("reCodeList")
	public List<CodeVO>reCodeList(){
		String code ="RE";
		return codedao.selectCode(code);
	}
	
	//급여 공통 코드 
	@ModelAttribute("salCodeList")
	public List<CodeVO>salCodeList(){
		String code = "PY";
		return codedao.selectCode(code);
	}
	
	//지원자 학력 공통 코드
	@ModelAttribute("eduCodeList")
	public List<CodeVO>eduCodeList(){
		String code = "E";
		return codedao.selectCode(code);
	}
	
//---------------------------------------------------------------------------
	
	//기존의 입력값을 가져오기 위해  /prod/prodInsert.do get메소드 일때 'form' 태그사용하기 위해 꼭 써줘야함!
	//컨트롤러 실행 되기전에 실행 됨 @ModelAttribute쓴 이유는 재활용을 위해
	@ModelAttribute("recruit")  
	public RecruitVO recruit() {
		return new RecruitVO();
	}
	
	@ModelAttribute("procedure")  
	public RProcedureVO procedure() {
		return new RProcedureVO();
	}
	
//---------------------------------------------------------------------------
	//채용공고 스크랩 클릭시 스크랩 등록, 삭제
	@ResponseBody
	@PostMapping("/recruit/{reNo}/scrap")
	public String scrapRecruit(
			@PathVariable String reNo,
			@SessionAttribute("authId")String usersId
			,@ModelAttribute("scrap")ScrapVO scrap
			) {
		
		String msg = "NG";
		//String usersId = "az001";  //하드코딩
		
		scrap.setUsersId(usersId);
		scrap.setRcrtNo(reNo);
		
		ServiceResult scrapResult = reService.scrapCheck(scrap);
		log.info("스크랩:{}",scrapResult);
		
		if(scrapResult == ServiceResult.OK) {
			reService.removeScrap(scrap);
			
			msg = "NG";
		}else {
			reService.scrapRecruit(scrap);
			msg ="OK";
		}
		
		return msg;
	}
	
	//채용공고 스크랩 체크
	@ResponseBody
	@GetMapping("/recruit/{reNo}/scrapcheck")
	public String scrapRecruitCheck(
			@PathVariable String reNo
			,@SessionAttribute("authId")String usersId
			,@ModelAttribute("scrap")ScrapVO scrap
			) {
		String msg = "NG";
//		String usersId = "az001"; //하드코딩
		
		scrap.setUsersId(usersId);
		scrap.setRcrtNo(reNo);
		ServiceResult result = reService.scrapCheck(scrap);
		
		if(result == ServiceResult.OK) {
			msg = "OK";
		}
		
		return msg;
		
	}
	
//---------------------------------------------------------------------------	
	//view  상세보기
	@GetMapping("/recruit/{reNo}")
	public String recruitViewUI(
			@PathVariable String reNo
			, Model model
			//,Locale locale
			
			) {
		RecruitVO recruit = reService.retrieveRecruit(reNo);
		List<RProcedureVO>procedureList = reService.procedureList(reNo);  //채용절차
		
		
		
		log.info("recruit->", recruit);
		log.info("procedureList->", procedureList);
		
		
		//model.addAttribute("serverTime", formattedDate );
		model.addAttribute("procedureList", procedureList);
		model.addAttribute("recruit", recruit);
		return "users/recruit/recruitDetail";
		
	}
	
	
//---------------------------------------------------------------------------	

	// 지역 list UI
	@RequestMapping("/recruit/region")
	public String regionListUI() {

		return "users/recruit/recruitRegionList";
	}
	

	// 지역 list + 페이징 data처리
	@RequestMapping("/recruit/region/regionData")
	public String regionListData(@ModelAttribute("detailCondition") RecruitVO detailCondition,
			@RequestParam(value = "page", required = false, defaultValue = "1") int currentPage, Model model) {

		PaginationInfo<RecruitVO> paging = new PaginationInfo<RecruitVO>(10, 5);
		paging.setCurrentPage(currentPage);
		paging.setDetailCondition(detailCondition); // 검색 상세 조건

		reService.retrieveRecruitList(paging);
		

		paging.setRenderer(new BootstrapPaginationRenderer());

		model.addAttribute("paging", paging);

		return "jsonView";

	}
	// 직업 list UI
	@RequestMapping("/recruit/job")
	public String JobListUI() {

		return "users/recruit/recruitJobList";
	}
	// 직업 list + 페이징 data처리
		@RequestMapping("/recruit/job/jobData")
		public String jobListData(@ModelAttribute("detailCondition") RecruitVO detailCondition,
				@RequestParam(value = "page", required = false, defaultValue = "1") int currentPage, Model model) {

			PaginationInfo<RecruitVO> paging = new PaginationInfo<RecruitVO>(10, 5);
			paging.setCurrentPage(currentPage);
			paging.setDetailCondition(detailCondition); // 검색 상세 조건

			reService.retrieveRecruitList(paging);

			paging.setRenderer(new BootstrapPaginationRenderer());

			model.addAttribute("paging", paging);

			return "jsonView";

		}
	
	//top100 list UI
	@GetMapping("/recruit/Top100")
	public String Top100ListUI() {
		
		return "users/recruit/recruitTop100List";
		
	}
	//top100 list data
	@ResponseBody
	@GetMapping("/recruit/Top100/Top100Data")
	public List<RecruitVO> Top100ListData() {
		
		
	   List<RecruitVO> list = reService.retrieveTop100List();
	   log.info("체크list", list);
		
	   return list;
	   //Model은 주로 View에 데이터를 전달하는 데 사용되기 때문에, jsonView에서는 이를 해석할 수 없을 것
	}
	
//---------------------------------------------------------------------------	
	
	//테스트 시험지
	@ResponseBody
	@GetMapping("recruit/test")
	public List<TestVO> selectTest(
			@SessionAttribute("authId")String companyId
			,Model model	
			){
//		String id  = "lg001"; //하드 코딩
		List<TestVO>list =reService.selectTest(companyId);
		model.addAttribute("testList", list);
		return list;
		
	}
	
	// 채용공고 insert UI
	@RequestMapping(value = "/recruit/form" , method = RequestMethod.GET )
	public String recruitFormUI(Model model) {

	    return "company/recruit/recruitForm";
	}

	// 채용공고 insert
	@PostMapping("/recruit/new")
	public String recruitInsert(
			@Validated(InsertGroup.class) @ModelAttribute("recruit") RecruitVO recruitVo
			,BindingResult errors
			,@SessionAttribute("authId")String companyId
			,SessionStatus sessionStatus
			,RedirectAttributes redirectAttributes
			, Model model) {
		/*
		RecruitInsert->recruitVo : 
		RecruitVO(rnum=0, rcrtNo=null, rcrtStime=06:30, rcrtEtime=09:00, companyId=null, rcrtTitle=공고제목, rcrtHit=0, rcrtKeywordnm=null, rcrtField=모집분야명, rcrtPerson=2, rcrtCareer=신입, rcrtCondition=우대조건, rcrtEdu=고등학교졸업이상, rcrtLoc=ㅇㄴㅁㅇㅁㄴ, rcrtType=계약직, rcrtSalary=연봉,22, rcrtWeek=주 3일, rcrtDate=null, rcrtSdate=2023-11-15, rcrtEdate=2023-11-23, rcrtNm=담당자명, rcrtTel=01023232323, rcrtMail=ㅇㄴㅇㄴ, rcrtWlfr=ㄴㅇㄴㅇ, rcrtRectype=6, rcrtDelete=null, rProcedure=[
		RProcedureVO(rcrtNo=null, rprocOrder=1, rprocTypeno=RE01, rprocSdate=2023-11-08, rprocEdate=2023-11-16, rprocEnd=null, testNo=null), 
		RProcedureVO(rcrtNo=null, rprocOrder=2, rprocTypeno=RE02, rprocSdate=2023-11-22, rprocEdate=2023-11-24, rprocEnd=null, testNo=test.testType), 
		RProcedureVO(rcrtNo=null, rprocOrder=3, rprocTypeno=RE03, rprocSdate=2023-11-22, rprocEdate=2023-11-29, rprocEnd=null, testNo=test.testType)], 
		company=null)
		 */
		log.info("RecruitInsert->recruitVo : " + recruitVo);
		boolean valid = !errors.hasErrors();
		
		String viewName = null;
		
		
		if (valid) {
			recruitVo.setCompanyId(companyId);  // 기업 아이디 하드코딩
			recruitVo.setRcrtKeywordnm("개발");  //  하드코딩
			
			ServiceResult result = reService.createRecruit(recruitVo);
		
			
			switch (result) {
			case OK:

				// 어디로 보내야할까? 
				viewName = "redirect:/indexCompany.do";
				
				break;

			default:
				// FAIL
				redirectAttributes.addFlashAttribute("message","다시 시도하세요");
				viewName = "company/recruit/recruitForm";
				//session.setAttribute("message", "다시 시도하세요.");
				break;
			}
		}else {
			log.info("결과",recruitVo);
			
			redirectAttributes.addFlashAttribute("message","검증 오류 다시 시도하세요.");
			viewName = "company/recruit/recruitForm";
			//session.setAttribute("message", "검증 오류 다시 시도하세요.");
		}

		return viewName;
	}
	

}
