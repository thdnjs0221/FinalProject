package kr.or.ddit.users.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpSession;

import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.SessionAttribute;

import kr.or.ddit.common.enumpkg.ServiceResult;
import kr.or.ddit.common.vo.MemberVO;
import kr.or.ddit.users.service.UsersInfoService;
import kr.or.ddit.utils.ValidationUtils;
import kr.or.ddit.validate.grouphint.DeleteGroup;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/user")
public class UsersInfoController {
	@Inject
	private UsersInfoService service;

	// 개인정보 조회
	@GetMapping("info")
	public String userInfo(
			Model model
			, @SessionAttribute("authId") String memId
			) {
		log.info("아이디 : " + memId);
		MemberVO member = service.retrieveUsers(memId);
		model.addAttribute("member", member);

		return "users/member/memberInfo";
	}
	
	
	// 수정
	@GetMapping("infoEdit")
	public String userInfoEdit(
			Model model
			, @SessionAttribute("authId") String memId
			) {
		MemberVO member = service.retrieveUsers(memId);
		model.addAttribute("member", member);

		return "users/member/memberInfoEdit";
	}
	
	// 수정 실행
	@PostMapping("editPost")
	public String usersInfoUpdate(
			MemberVO memberVO
			, @SessionAttribute("authId") String memId
			, Model model
		) {
			log.info("editPost->memberVO : " + memberVO);
		  
			int result = this.service.modifyUsers(memberVO);
			log.info("result : " + result);
		  
			//redirect : url
			return "redirect:/companyMemInfo";
	}

	// 탈퇴
	@DeleteMapping("delete")
	public String usersInfoDelete(
	        @AuthenticationPrincipal MemberVO member
	        , @RequestParam("memPass") String memPass
	        , HttpSession session
	        ) {
		log.info("값 : " + member);
		
	    String memId = member.getMemId();

	    MemberVO inputData = new MemberVO();
	    inputData.setMemId(memId);
	    inputData.setMemPass(memPass);

	    Map<String, List<String>> errors = new HashMap<>();
	    boolean valid = ValidationUtils.validate(inputData, errors, DeleteGroup.class);
	    String viewName = null;

	    if (valid) {
	        ServiceResult result = service.removeUsers(inputData);
	        switch (result) {
	            case INVALIDPASSWORD:
	                viewName = "redirect:/user/info";
	                session.setAttribute("message", "비밀번호가 일치하지않습니다. 다시 입력하세요."); // flash attribute
	                break;
	            case OK:
	                session.invalidate();
	                viewName = "redirect:/";
	                break;
	            default:
	                viewName = "redirect:/user/info";
	                session.setAttribute("message", "서버 오류"); // flash attribute
	                break;
	        }
	    } else {
	        viewName = "redirect:/user/info";
	        session.setAttribute("message", "비밀번호를 입력하세요."); // flash attribute
	    }
	    return viewName;
	}
}
