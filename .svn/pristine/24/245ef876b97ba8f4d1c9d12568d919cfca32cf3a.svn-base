package kr.or.ddit.common.controller;

import javax.inject.Inject;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.common.enumpkg.ServiceResult;
import kr.or.ddit.common.service.AuthenticateService;
import kr.or.ddit.common.service.MemberService;
import kr.or.ddit.common.vo.MemberVO;
import lombok.extern.slf4j.Slf4j;


/**
 * @author 홍길동
 * @since 2023. 11. 9.
 * @version 1.0
 * @see javax.servlet.http.HttpServlet
 * <pre> 
 * [[ 개정이력 (Modification Information) ]]
 * 수정일        수정자          수정내용 
 * --------   ----------    -------------
 * 2023. 11. 9.     김소원       최초작성
 * 
 * Copyright (c)  2023  by DDIT ALL right reserved
 * </pre>
 * 
 * 
 */

@Slf4j
@Controller
public class MemberController {
	
	@Inject
	private AuthenticateService service;
	
	@Inject
	private MemberService memService;
	
	//로그인 UI
	@GetMapping (value = "/loginForm")
	public String loginForm() {
		return "users/auth/login";
	}
	
	//로그인 data
			@PostMapping (value = "/loginProcess")
			public String Login(
					@RequestParam("memId") String memId
					,@RequestParam("memPass") String memPass
					,HttpSession session
					, RedirectAttributes redirectAttribute
					) {
				
				MemberVO inputData = new MemberVO();
				inputData.setMemId(memId);
				inputData.setMemPass(memPass);
				
				String viewName = null;
				
				ServiceResult result = service.authenticate(inputData);
				
				//판단 
				switch (result) {
				case OK:
					//인증 성공 - 웰컴페이지로 이동
					if(inputData.getMemDivision().equals("H02")) {
						viewName = "redirect:/";
						session.setAttribute("authId", inputData.getMemId()); //세션 추가
						session.setAttribute("authNm", inputData.getUsers().getUsersNm()); //이름 세션 추가
						log.info("이름:{}",inputData.getUsers().getUsersNm());
						
					}else if(inputData.getMemDivision().equals("H03")) {
						viewName = "redirect:/indexCompany.do";
						session.setAttribute("authId", inputData.getMemId()); //세션 추가
						session.setAttribute("authNm", inputData.getCompany().getCompanyDnm()); //세션 추가
						log.info("기업이름:{}",inputData.getCompany().getCompanyDnm());
					}else if(inputData.getMemDivision().equals("H01")) {
						session.setAttribute("authId", inputData.getMemId()); //세션 추가
						session.setAttribute("authNm", "관리자"); //세션 추가
						viewName = "redirect:/indexAdmin.do";
						
					}
					break;
				case INVALIDPASSWORD:
					//인증 실패 - 로그인폼으로 이동
					redirectAttribute.addFlashAttribute("message", "비밀번호 오류입니다.");
					viewName = "redirect:/loginForm";
					break;

				default:
					//멤버 없을 경우
					redirectAttribute.addFlashAttribute("message", "가입 안했거나 이미 탈퇴한 회원입니다.");
					viewName = "redirect:/loginForm";
					break;
				}
				return viewName;
			}
	
	//로그아웃
	@PostMapping (value = "/logoutProcess")
	public String logout(HttpSession session) {
        String viewName;
        if (session != null) {
            try {
                // 세션 무효화 
                session.invalidate();
                viewName = "redirect:/";
            } catch (IllegalStateException e) {
                viewName = "redirect:/loginForm";
            }
        } else {
            viewName = "redirect:/loginForm";
        }
        return viewName;
    }


	//비밀번호 찾기  UI
	@GetMapping(value = "/pwFind/Form")
	public String pwFindForm() {
	
		return "users/auth/pwFind";
	}
	//비밀번호 찾기
	//@RequestParam일떄 jsp 에서data:"JSON.stringify(memberVO)쓰지 않고 파라미터를 직접 전달하기
	@ResponseBody
	@PostMapping(value = "/pwFind/pwData")
	public String pwFindData(
						@RequestParam String id,
						@RequestParam String email
					) {
		
		log.info("아이디:{}",id);
		log.info("이메일:{}",email);
		MemberVO member = new MemberVO();
		
		member.setMemId(id);
		member.setMemMail(email);
		
		ServiceResult result = memService.selectPwFind(member);
		String msg = "NG";
		if(result == ServiceResult.OK) {
			//아이디와 비밀번호가 일치하면
			//이메일 보내기 아직 못함...
			int min = 100000; 
			int max = 999999;
			int randomNum = min + (int) (Math.random() * ((max - min) + 1));
			String userPw = String.valueOf(randomNum);
			
			member.setMemId(id);
			member.setMemMail(email);
			member.setMemPass(userPw);
			
			ServiceResult updateRes = memService.modifyPw(member);
			msg = "OK";
		}
		return msg;
	}
}
