package kr.or.ddit.users.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.SessionAttribute;

import kr.or.ddit.company.vo.AProcedureVO;
import kr.or.ddit.company.vo.ApplyVO;
import kr.or.ddit.company.vo.RProcedureVO;
import kr.or.ddit.company.vo.TestVO;
import kr.or.ddit.users.dao.RcrtApplyDAO;
import kr.or.ddit.users.service.RcrtApplyService;
import kr.or.ddit.validate.grouphint.InsertGroup;

@Controller
@RequestMapping("/users")
public class RcrtApplyController {
	
	@Inject
	private RcrtApplyService service;
	
	
	/**
	 * retrieveRecruitProcedure - 채용절차 조회
	 * retrieveCurrentProcedureInfo - 현재 채용절차 조회
	 * retrieveNextProcedure - 다음 채용절차 조회
	 * 
	 */
	@GetMapping("/apply/{rcrtNo}/{rprocOrder}")
	public String applyViewRetrieve(
			@PathVariable String rcrtNo
			, @PathVariable int rprocOrder
			, @SessionAttribute("authId") String usersId,
			String comCodeNm
			, Model model
	) {
		List<RProcedureVO> dataList = service.retrieveRecruitProcedure(rcrtNo);
		
		System.out.println("dataList : " + dataList);
		
		Map<String, Object> paramMap = new HashMap<>();
		paramMap.put("rcrtNo", rcrtNo);
		paramMap.put("rprocOrder", rprocOrder);
		paramMap.put("usersId", usersId);
		RProcedureVO currProcedureInfo = service.retrieveCurrentProcedureInfo(paramMap);		
		
		
		List<ApplyVO> apply = service.retrieveApplicant(paramMap);
		ApplyVO appVO = null;
		for (int i = 0; i < apply.size(); i++) {
			ApplyVO app = apply.get(i);
			if(app.getProcedure_r().getRprocOrder() == rprocOrder) {
				appVO = app;
				break;
			}
		}
		
		List<Integer> orders = new ArrayList<Integer>();
		for (int i = 0; i < apply.size(); i++) {
			orders.add(apply.get(i).getProcedure_r().getRprocOrder());
		}
		
		RProcedureVO nextRproc = service.retrieveNextProcedure(paramMap);
		
		model.addAttribute("dataList", dataList);
		model.addAttribute("currProcedureInfo", currProcedureInfo);
		model.addAttribute("apply", appVO);
		model.addAttribute("userOrders", orders);
		model.addAttribute("applyList", apply);
		model.addAttribute("comCodeNm", comCodeNm);
		model.addAttribute("nextRproc", nextRproc);
		
		return "users/rcrtApply/rcrtApplyView";
	}
	
//	@PostMapping("/apply/nextApply")
//	public String rcrtForm(
//			@RequestParam int rprocOrder,
//			String rcrtNo,
//			@SessionAttribute("authId") String usersId
//			, @RequestParam("rprocTypeno") String rprocTypeno
//			, Model model
//		) {
//		
//			Map<String, Object> paramMap = new HashMap<>();
//			paramMap.put("rprocOrder", rprocOrder);
//			paramMap.put("usersId", usersId);
//			paramMap.put("rprocTypeno", rprocTypeno);
//			paramMap.put("rcrtNo", rcrtNo);
//			RProcedureVO rprocVO = service.retrieveNextProcedure(paramMap);
//			
//			String comCodeNm = rprocVO.getRprocTypeno();						
//			
//			rprocVO.setRprocOrder(rprocOrder);			
//			
//		return "redirect:/users/apply/" + rcrtNo + "/" + (rprocVO.getRprocOrder() + 1) + "?comCodeNm="+comCodeNm;
//	}
	
	
	/**
	 * 적성검사 / 기술시험 시험지 조회
	 */
	@GetMapping("apply/test/{testNo}")
	@ResponseBody
	public List<TestVO> testRetrieve(
		@PathVariable String testNo
		, Model model
	) {
		
		List<TestVO> test = service.retrieveTest(testNo);
		
		model.addAttribute("test", test);
		
		return test;
	}
	
	
	

}
